1/Sorting - Read and have ideas
+ Bubble sort (Need to implement by yourself desc vs asc)
	Example:
		Given:  [ 2, 6, 4, 9, 8]
		Output: [ 2, 4, 6, 8, 9]
		
using System;
using System.Collections.Generic;

namespace C_Sharp_Compiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            List<int> numbers = new List<int> { 2, 6, 4, 9, 8 };

            for (int p = 0; p < numbers.Count - 1; p++)
            {
                for (int i = 0; i < numbers.Count - 1; i++)
                {
                    if (numbers[i] > numbers[i + 1])
                    {
                        int temp = numbers[i];
                        numbers[i] = numbers[i + 1];
                        numbers[i + 1] = temp;
                    }
                }
            }
            foreach (int element in numbers)
                Console.Write($"{element} ");
        }
    }
}

+ Quick sort

2/Searching - Read and have ideas
+ Linear (Need to implement by yourself)
	Example:
		Given:  [ 2, 6, 4, 9, 8]
		Search : 4
		Return true or false
		
using System;
using System.Collections.Generic;

namespace C_Sharp_Compiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("What number are you looking for? ");

            int desirednum = int.Parse(Console.ReadLine());

            List<int> numbers = new List<int> { 2, 6, 4, 9, 8 };

            Console.WriteLine(linearSearch(numbers, desirednum));



        }

        public static bool linearSearch (List<int> numbers, int desirednum)
        {
            for (int i = 0; i < numbers.Count - 1; i++)
            {
                if (numbers[i] == desirednum)
                {
                    return true;
                }
            }

            return false;
        }
    }
}

+ Binary

using System;
using System.Collections.Generic;

namespace C_Sharp_Compiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("What number are you looking for? ");

            int desirednum = int.Parse(Console.ReadLine());

            List<int> numbers = new List<int> { 2, 6, 4, 9, 8 };

            if (binarySearch(numbers, desirednum) == 0)
                Console.WriteLine("Number can't be found");
            else
                Console.WriteLine($"Number can be found at index {binarySearch(numbers, desirednum)}");
        }

        public static int binarySearch(List<int> numbers, int desirednum)
        {
            int min = 0;
            int max = numbers.Count - 1;
            while (min <= max)
            {
                int midpoint = (min + max) / 2;

                if (desirednum == numbers[midpoint])
                    return midpoint;

                else if (desirednum > numbers[midpoint])
                    min++;

                else
                    max--;
            }
            return 0;
        }
    }
}

4/Modify your previous sorting problems

PRIME NUMBER IMPROVEMENT
private static bool IsPrimeNumber(int givenNumber)
{
	Stopwatch sw = Stopwatch.StartNew();

	int counter = 0;

	for (int i = 2; i <= Math.Sqrt(givenNumber) + 1; i++)
	{
		if (givenNumber % i == 0)
			counter = 1;
	}

	Console.WriteLine("Took " + sw.ElapsedMilliseconds);

	if (counter == 0 && givenNumber != 1 && givenNumber != 0)
		return true;

	return false;
}
