1/ Joining common values from two sequences using the LINQ. Hit: use Intersect operator
Example: 
{"hello", "hi", "good evening", "good day", "good morning", "goodbye" }
{"whatsup", "how are you", "hello", "bye", "hi"}

Output: 
“hello”
“hi”

using System.Collections.Generic;
using System.Linq;
using System;

namespace C_Sharp_Compiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            List<string> phrases1 = new List<string>() 
            { "hello", "hi", "good evening", "good day", "good morning", "goodbye" };

            List<string> phrases2 = new List<string>() { "whatsup", "how are you", "hello", "bye", "hi"};

            // Intersect is a method that gets common elements from 2 collections
            var result = phrases1.Intersect(phrases2);

            foreach (var element in result)
                Console.WriteLine(element);
        }
    }
}

2/ Joining unique values from two sequences using the LINQ: Hit: use Union operator

string[] first = new string[] {"hello", "hi", "good evening", "good day", "good morning", "goodbye" };
string[] second = new string[] {"whatsup", "how are you", "hello", "bye", "hi"};

using System.Collections.Generic;
using System.Linq;
using System;

namespace C_Sharp_Compiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            List<string> phrases1 = new List<string>() 
            { "hello", "hi", "good evening", "good day", "good morning", "goodbye" };

            List<string> phrases2 = new List<string>() { "whatsup", "how are you", "hello", "bye", "hi"};

            // Union is a method that merges collections
            var result = phrases1.Union(phrases2);

            foreach (var element in result)
                Console.WriteLine(element);
        }
    }
}

3/ Write a program in C# Sharp to find the strings for a specific minimum length.
Example:
Input number of strings to store in the array :4
Input 4 strings for the array:
Element[0] : this
Element[1] : is
Element[2] : a
Element[3] : string
Input the minimum length of the item you want to find : 5
Expected Output:
The items of minimum 5 characters are :
Item: string

using System.Collections.Generic;
using System.Linq;
using System;

namespace C_Sharp_Compiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            List<string> strings = new List<string>();

            Console.Write("Enter the number of strings: ");
            int numStrings = int.Parse(Console.ReadLine());

            for (int i = 0; i < numStrings; i++)
            {
                Console.Write($"Element {i}: ");
                strings.Add(Console.ReadLine());
            }

            Console.Write("What's the minimum number of characters of the strings you want returned? ");
            int minimum = int.Parse(Console.ReadLine());

            var query =
                from eachString in strings
                where eachString.Length >= minimum
                select eachString;

            Console.WriteLine("Here are the strings that meet your requirement: ");
            foreach (var element in query)
                Console.WriteLine(element);
                
            
        }
    }
}

4/ Write a program in C# Sharp to display the list of items in the array according to the length of the string then by name in ascending order.
Expected Output :
Here is the arranged list :
ROME
PARIS
LONDON
ZURICH
NAIROBI
ABU DHABI
AMSTERDAM
NEW DELHI
CALIFORNIA

using System.Collections.Generic;
using System.Linq;
using System;

namespace C_Sharp_Compiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            List<string> strings = new List<string>()
            {"NEW DELHI", "NAIROBI", "LONDON", "ROME", "PARIS", "ZURICH", "ABU DHABI", "AMSTERDAM", "CALIFORNIA" };

            var query =
                from eachString in strings
                orderby eachString.Length
                select eachString;

            foreach (var element in query)
                Console.WriteLine(element);
                
            
        }
    }
}

5/ Write a program in C# Sharp to arrange the distinct elements in the list in ascending order: Hit - use distinct linq
Example: { Brade, Biscuit, Butter, Honey, Brade, Biscuit }
Expected Output :
Biscuit
Brade
Butter
Honey

using System.Collections.Generic;
using System.Linq;
using System;

namespace C_Sharp_Compiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            List<string> strings = new List<string>()
            { "Brade", "Biscuit", "Butter", "Honey", "Brade", "Biscuit" };

            var query = strings.Distinct().OrderBy(eachString => eachString);

            foreach (var element in query)
                Console.WriteLine(element);


        }
    }
}
6/ https://www.tutorialsteacher.com/online-test/linq-test

NOTE: 
+ Linq apply for C#, Visual basic language
+ All the collections want to use LinQ must implement/inherit IQueryable 
