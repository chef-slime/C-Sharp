1/ Write a method
	public static int max(int[][] a) 
that returns the maximum value in the 2d parameter array a.

using System;

class Program
{
    public static void Main(string[] args)
    {
        int[][] a = 
        {
            new int[] {1, 2, 3, 4},
            new int[] {5, 6, 7, 8},
            new int[] {9, 10, 11, 12}
        };

        Console.WriteLine(Maxmimum(a));

        int Maxmimum (int[][] _a)
        {
            int max = int.MinValue;
            for (int row = 0; row < a.Length; row++)
            {
                for (int column = 0; row < a[row].Length; column++)
                {
                    if (a[row][column] > max)
                        max = a[row][column];
                }
            }

            return max;
        }
    }
}

2/ Write a method
	public static int rowSum(int[][] a, int x)
that returns the sum of the elements in Row x of a.

using System;
using System.Collections.Generic;


class Program
{
    public static void Main(string[] args)
    {
        int[][] a = 
        {
            new int[] {1, 2, 3, 4},
            new int[] {5, 6, 7, 8},
            new int[] {9, 10, 11, 12}
        };

        for(int i = 0; i < Sum(a).Count; i++)
            Console.WriteLine($"Row {i+1}: {Sum(a)[i]}");

        List<int> Sum (int[][] _a)
        {
            List<int> sums = new List<int>(); 
            int sum = 0;
            for (int row = 0; row < a.Length; row++)
            {
                sum = 0;
                for (int column = 0; column < a[row].Length; column++)
                {
                        sum += a[row][column];
                }

                sums.Add(sum);
            }
            return sums;
        }
    }
}

3/ Write a method
	public static int columnSum(int[][] a, int x)
that returns the sum of the elements in Column x of a (careful with rows of different lengths!).

using System;
using System.Collections.Generic;


class Program
{
    public static void Main(string[] args)
    {
        int[][] a = 
        {
            new int[] {1, 2, 3, 4},
            new int[] {5, 6, 7, 8},
            new int[] {9, 10, 11, 12, 13}
        };

        foreach (var kvp in Sum(a))
            Console.WriteLine($"Column {kvp.Key+1}: {kvp.Value}");

        Dictionary<int, int> Sum (int[][] _a)
        {
            Dictionary<int, int> sums = new Dictionary<int, int>();
            int sum = 0;
            for (int row = 0; row < a.Length; row++)
            {
                for (int column = 0; column < a[row].Length; column++)
                {
                    sum = 0;
                    sum += a[row][column];

                    if (sums.ContainsKey(column))
                        sums[column] += sum;
                    else
                        sums.Add(column, sum);
                }
            }
            return sums;
        }
    }
}

4/ Write a method
	public static int[] allRowSums(int[][] a)
that calculates the row sum for every row and returns each of the values in an array. Index i of the return array contains the sum of elements in row i.

5/ Write a method
	public static boolean isRowMagic(int[][] a)
that checks if the array is row-magic (this means that every row has the same row sum).

6/ Write a method
	public static boolean isColumnMagic(int[][] a)
that checks if the array is column-magic (this means that every column has the same column sum).
