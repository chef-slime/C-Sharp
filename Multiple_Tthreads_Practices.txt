using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace C_Sharp_Compiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            List<int> numbers = new List<int>() { 952464865, 917303614 };
            Task[] tasks = new Task[3];

            /* => is a lambda operator used in LAMBDA expressions which says ""given something, return something" 
            or "given x, do something with x" */
            tasks[0] = Task.Factory.StartNew(() => Divisibility(numbers[0]));
            tasks[1] = Task.Factory.StartNew(() => Divisibility(numbers[1]));

            // Why is this necessary for threads to run?
            Console.ReadKey();
        }

        private static void Divisibility(int number)
        {
            int counter = 0;
            for (int i = 1; i <= number; i++)
            {
                if (number % i == 0)
                    counter++;
            }

            Console.WriteLine($"{number} has {counter} divisible numbers");
        }
    }
}
