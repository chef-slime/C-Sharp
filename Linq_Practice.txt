1/ Write a program in C# Sharp to find the numbers from a given range.
Example:
Input: [ 1, 10 , 5 , 7 , 9 , 4 ]
Given Range 1,8
The numbers within the range of 1 to 8 are :
1 5 7 4

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharpCompiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            List<int> numbers = new List<int> { 1, 10, 5, 7, 9, 4 };

            IEnumerable<int> query =
                from eachNumber in numbers
                where eachNumber >= 1 && eachNumber <= 8
                select eachNumber;
            foreach(int i in query)
            {
                Console.Write(i + " ");
            }
        }
    }  
}

2/ Write a program in C# Sharp to display the number and frequency of number from giving array.
Input: { 5, 9, 1, 2, 3, 7, 5, 6, 7, 3, 7, 6, 8, 5, 4, 9, 6, 2 }

Expected Output :
The number and the Frequency are :
Number 5 appears 3 times
Number 9 appears 2 times
Number 1 appears 1 times
...
...

var n = from x in arr1  
				group x by x into y  
				select y;  
				Console.WriteLine("\nThe number and the Frequency are : \n"); 
			    foreach (var arrNo in n)  
				{  
					Console.WriteLine("Number "+arrNo.Key + " appears " + arrNo.Count()+" times");  
				} 
        Console.WriteLine("\n");	

P/S: 2, 3, 4 use GROUP BY.

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharpCompiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            List<int> numbers = new List<int> 
            { 5, 9, 1, 2, 3, 7, 5, 6, 7, 3, 7, 6, 8, 5, 4, 9, 6, 2 };

            var query =
                from eachNumber in numbers
                group eachNumber by eachNumber into counter
                select counter;

            foreach (var element in n)
                Console.WriteLine("Number " + element.Key + " appears " + element.Count() + " times");

        }
    }  
}


3/  Write a program in C# Sharp to display the characters and frequency of character from giving string. Go to the editor
Test Data:
Input the string: apple

Expected Output:
The frequency of the characters are :
Character a: 1 times
Character p: 2 times
Character l: 1 times
Character e: 1 times

using System;
using System.Linq;

namespace CSharpCompiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            string input = "apple";

            var query =
                from eachCharacter in input
                group eachCharacter by eachCharacter into counter
                select counter;

            foreach (var counter in n)
                Console.WriteLine("Number " + counter.Key + " appears " + counter.Count() + " times");

        }
    }  
}

4/ Write a program in C# Program to Count File Extensions and Group it using LINQ.
Test Data :

The files are : aaa.frx, bbb.TXT, xyz.dbf,abc.pdf
aaaa.PDF,xyz.frt, abc.xml, ccc.txt, zzz.txt

Expected Output :
Here is the group of extension of the files :
1 File(s) with .frx Extension
3 File(s) with .txt Extension
1 File(s) with .dbf Extension
2 File(s) with .pdf Extension
1 File(s) with .frt Extension
1 File(s) with .xml Extension

using System;
using System.Linq;
using System.IO;

namespace CSharpCompiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            string[] files = { "aaa.frx", "bbb.TXT", "xyz.dbf", "abc.pdf", "aaaa.PDF", "xyz.frt", "abc.xml", "ccc.txt", "zzz.txt" };

            // query stores groups
            var query =
                from eachFile in files

                // fileGroup is a group that stores elements sharing a common attribute
                group eachFile by Path.GetExtension(eachFile).ToLower() into fileGroup
                // key value is the parameter the groups are created based on
                orderby fileGroup.Key
                select fileGroup;
            // array of arrays?
            foreach (var fileGroup in query)
                Console.WriteLine(fileGroup.Count() + " files with " + fileGroup.Key + " extension");

        }
    }  
}

5/iven a list of string, Write a program in C# Sharp to find the string which starts and ends with a specific character
Input: 'ROME','LONDON','NAIROBI','CALIFORNIA','ZURICH','NEW DELHI','AMSTERDAM','ABU DHABI','PARIS'
Input starting character for the string : A
Input ending character for the string : M

Expected Output :
The city starting with A and ending with M is : AMSTERDAM

using System;
using System.Linq;

namespace CSharpCompiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            string[] cities = { "ROME", "LONDON", "NAIROBI", "CALIFORNIA", "ZURICH", "NEW DELHI", "AMSTERDAM", "ABU DHABI", "PARIS" };

            var query =
                from eachCity in cities
                where eachCity.ToLower().StartsWith('a') && eachCity.ToLower().EndsWith('m')
                select eachCity;
            // array of arrays?
            foreach (string city in query)
                Console.WriteLine($"The city starting with A and ending with M is: {city}");

        }
    }  
}


6/ Write a program in C# Sharp to Accept the members of a list through the keyboard and display the members more than a specific value.
Test Data :

Input the number of members on the List : 5
Member 0 : 10
Member 1 : 48
Member 2 : 52
Member 3 : 94
Member 4 : 63
Input the value above you want to display the members of the List : 59

Expected Output :
The numbers greater than 59 are :
94
63

using System;
using System.Linq;
using System.Collections.Generic;

namespace CSharpCompiler
{
    class Program
    {
        public static void Main(string[] args)
        {
            Console.Write("Input the number of members on the list: ");
            int condition = int.Parse(Console.ReadLine());

            List<int> members = new List<int>();

            for (int i = 0; i < condition; i++)
            {
                Console.Write($"Member {i}: ");
                members.Add(int.Parse(Console.ReadLine()));
            }

            Console.Write("Input the value above you want to display the members of the list: ");
            int greaterthanValue = int.Parse(Console.ReadLine());

            var query =
                from eachMember in members
                where eachMember > greaterthanValue
                select eachMember;

            Console.WriteLine($"\nThe numbers greater than {greaterthanValue} are: ");
            foreach (int element in query)
                Console.WriteLine(element);
        }
    }  
}
